/** \page 03_DoxygenDocumentation Doxygen Documentation.


<h2>Why I chose to use Doxygen</h2>
<pre>
I decided to use Doxygen for this as not only have I been using it for years, therefore feeling pretty comfortable with the thing, but also,
the required changes to the source code which Doxygen uses to generate the code is minimal and clean looking and the syntax allows for some pretty cool
control of the generation of the docs.
It's really nice having the documentation generated from the source file comments as we only have to keep the comments up to date, instead of having to seperately create and modify external 
documentation files.
The todo keyword is incredibly usefull for creating a todo list for things to check/implement etc.
We simply add something like...

/// \todo Whatever we need to fix

whereever we need to do something and the generated Doxygen documentation creates a nice todo page for us to keep track of what needs doing.

I used this feature incredibly early one when I first started the DCP/DCL project and started adding code from my existing code. An early example of this
was when I was adding the CColour class over from my old X project, splitting it up into multiple data types. Originally within the X project, there was only
one data type for this class, a float for each colour component, but whilst adding the code over, I thought it'd be a great idea to add another CColour class using the unsigned char
data type. However, when looking through the interpolate() method which is used to "blend" between two values, I was unsure of whether the new data type changed the behaviour, so I added a
"todo Check this class!" tag to the top of the class and, there we have it, an awesome feature of the Doxygen todo tag :)

Another reason is that the documentation generated by Doxygen is actually quite helpful. Especially if you are not me. With a little extra effort on my part, this solution, projects and source code
comes with complete, easy to navigate documentation.

And another reason is that the documentation generated by Doxygen can have images placed within it. I've always wished that I could add images to the source code comments to help explain
certain concepts and thanks to the magic of Doxygen, now I can!
Certain concepts really benefit from having images to help show and explain certain concepts. All these images are located in /ProjectFiles/Documentation/BuildDoxygenDocs/images/
</pre>

<h2>How the documentation is generated</h2>
<pre>
The BuildDoxygenDocs project found in /ProjectFiles/Documentation/ has a custom build step which automatically builds the documentation for us.
Right click on the project file in the solution explorer found under Documentation filter, select "properties" and then navigate to
"Configuration Properties/Build Events/Post-Build event" and notice the text inside the "Command Line" setting which currently reads...

cmd.exe /C "$(SolutionDir)\ProjectFiles\Documentation\BuildDoxygenDocs\doxygen\build_docs_visualstudio_buildevent.bat"

This batch file calls the doxygen.exe located in /ProjectFiles/Documentation/BuildDoxygenDocs/ passing the file /ProjectFiles/Documentation/BuildDoxygenDocs/Doxyfile_config

The documentation is created inside "/Output/Documentation/html/index.html"
</pre>
*/